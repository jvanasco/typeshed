from _typeshed import Incomplete
from typing import Any
from typing import Dict
from typing import List
from typing import Optional

UNICODE_ASCII_CHARACTER_SET: str
CLIENT_ID_CHARACTER_SET: str
SANITIZE_PATTERN: Any
INVALID_HEX_PATTERN: Any
always_safe: str
log: Any

def quote(s, safe: bytes = b"/"): ...
def unquote(s): ...
def urlencode(params): ...
def encode_params_utf8(params): ...
def decode_params_utf8(params): ...

urlencoded: Any

def urldecode(query): ...
def extract_params(raw): ...
def generate_nonce(): ...
def generate_timestamp(): ...
def generate_token(length: int = 30, chars=...): ...
def generate_signed_token(private_pem, request): ...
def verify_signed_token(public_pem, token): ...
def generate_client_id(length: int = 30, chars=...): ...
def add_params_to_qs(query, params): ...
def add_params_to_uri(uri, params, fragment: bool = False): ...
def safe_string_equals(a, b): ...
def to_unicode(data, encoding: str = "UTF-8"): ...

class CaseInsensitiveDict(dict[Any, Any]):
    proxy: Any
    def __init__(self, data) -> None: ...
    def __contains__(self, k): ...
    def __delitem__(self, k) -> None: ...
    def __getitem__(self, k): ...
    def get(self, k, default: Incomplete | None = None): ...
    def __setitem__(self, k, v) -> None: ...
    def update(self, *args, **kwargs) -> None: ...

class Request:
    uri: Optional[str]
    http_method: Optional[str]
    headers: Optional[CaseInsensitiveDict]
    body: Optional[str]
    decoded_body: Optional[List]
    oauth_params: Optional[Union[Dict, List]]
    validator_log: Dict
    _params: Dict
    def __init__(
        self,
        uri,
        http_method: str = "GET",
        body: Incomplete | None = None,
        headers: Incomplete | None = None,
        encoding: str = "utf-8",
    ): ...
    def __getattr__(self, name: str): ...
    @property
    def uri_query(self) -> str: ...
    @property
    def uri_query_params(self) -> List: ...
    @property
    def duplicate_params(self) -> List: ...

    #   These properties are Read-Only
    #   Some are managed within self._params
    #   Others are assigned or expected by functions and subclasses
    @property
    def access_token(self) -> Optional[str]: ...
    @property
    def acr_values(self) -> Any: ...
    @property
    def callback(self) -> Optional[str]: ...
    @property
    def claims(self) -> Any: ...
    @property
    def client(self) -> Any: ...
    @property
    def client_id(self) -> Optional[str]: ...
    @property
    def client_key(self) -> Optional[str]: ...
    @property
    def client_secret(self) -> Optional[str]: ...
    @property
    def code(self) -> Optional[str]: ...
    @property
    def code_challenge(self) -> Optional[str]: ...
    @property
    def code_challenge_method(self) -> Optional[str]: ...
    @property
    def code_verifier(self) -> Optional[str]: ...
    @property
    def display(self) -> Optional[str]: ...
    @property
    def expires_in(self) -> Optional[int]: ...
    @property
    def extra_credentials(self) -> Optional[Dict]: ...
    @property
    def grant_type(self) -> Optional[str]: ...
    @property
    def id_token_hint(self) -> Optional[str]: ...
    @property
    def login_hint(self) -> Any: ...
    @property
    def max_age(self) -> Any: ...
    @property
    def nonce(self) -> Optional[str]: ...
    @property
    def params(self) -> Optional[List]: ...
    @property
    def password(self) -> Optional[str]: ...
    @property
    def prompt(self) -> Any: ...
    @property
    def realm(self) -> Optional[str]: ...
    @property
    def realms(self) -> Optional[List[str]]: ...
    @property
    def redirect_uri(self) -> Optional[str]: ...
    @property
    def refresh_token(self) -> Optional[str]: ...
    @property
    def request_token(self) -> Optional[str]: ...
    @property
    def resource_owner_key(self) -> Optional[str]: ...
    @property
    def response_mode(self) -> Optional[str]: ...
    @property
    def response_type(self) -> Optional[str]: ...
    @property
    def scope(self) -> Any: ...
    @property
    def scopes(self) -> Optional[List[str]]: ...
    @property
    def signature(self) -> Optional[str]: ...
    @property
    def signature_method(self) -> Optional[str]: ...
    @property
    def state(self) -> Optional[str]: ...
    @property
    def timestamp(self) -> Optional[str]: ...
    @property
    def token(self) -> Optional[str]: ...
    @property
    def token_type_hint(self) -> Optional[str]: ...
    @property
    def ui_locales(self) -> Optional[str]: ...
    @property
    def user(self) -> Any: ...
    @property
    def username(self) -> Optional[str]: ...
    @property
    def using_default_redirect_uri(self) -> bool: ...
    @property
    def verifier(self) -> Optional[str]: ...
